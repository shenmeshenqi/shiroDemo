<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zzh.shirotest.demo.dao.mapper.RoleMapper" >
  <resultMap id="BaseResultMap" type="com.zzh.shirotest.demo.domain.Role" >
    <id column="roleid" property="roleid" jdbcType="INTEGER" />
    <result column="rolename" property="rolename" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    roleid, rolename
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from role
    where roleid = #{roleid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from role
    where roleid = #{roleid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.zzh.shirotest.demo.domain.Role" >
    insert into role (roleid, rolename)
    values (#{roleid,jdbcType=INTEGER}, #{rolename,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.zzh.shirotest.demo.domain.Role" >
    insert into role
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="roleid != null" >
        roleid,
      </if>
      <if test="rolename != null" >
        rolename,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="roleid != null" >
        #{roleid,jdbcType=INTEGER},
      </if>
      <if test="rolename != null" >
        #{rolename,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zzh.shirotest.demo.domain.Role" >
    update role
    <set >
      <if test="rolename != null" >
        rolename = #{rolename,jdbcType=VARCHAR},
      </if>
    </set>
    where roleid = #{roleid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zzh.shirotest.demo.domain.Role" >
    update role
    set rolename = #{rolename,jdbcType=VARCHAR}
    where roleid = #{roleid,jdbcType=INTEGER}
  </update>
<!--
  /**
  * 根据用户名查找用户所具有的角色
  * @param name
  * @return
  */
  List<Role> selectUserRoleByUsername(String name);-->
  <select id="selectUserRoleByUsername" resultMap="BaseResultMap">
    select r.roleid,r.rolename
    from user u
    inner join
    user_role ur
    on u.userid=ur.userid
    inner join
    role r
    on ur.roleid=r.roleid
    where
    u.username=#{username}
  </select>

<!--根据用户id用户具有角色-->
  <select id="selectUserRoleByUserid" resultMap="BaseResultMap">
    select r.roleid,r.rolename
    from user u
    inner join
    user_role ur
    on u.userid=ur.userid
    inner join
    role r
    on ur.roleid=r.roleid
    where
    u.userid=#{userid}
  </select>
</mapper>